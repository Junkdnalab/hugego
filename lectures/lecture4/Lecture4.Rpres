<style>
.small-code pre code {
  font-size: 1em;
}
</style>

Lecture 4 Biological enrichment calculations and GO/GSEA
========================================================
author: 
date: 04/06/2021
autosize: true
transition: fade
```{r setup, include=FALSE}
Sys.getenv("HOME") # see where your home directory is
course_directory <- file.path(Sys.getenv("HOME"), "repos", "hugego")
library(ggplot2)
library(ggthemes)
library(tidyverse)
library(ggridges)
library(knitr)
opts_chunk$set(cache=TRUE, fig.width=12, fig.height=6)
```

Goals
========================================================

- learn what qualifies as enrichment

Goals
========================================================

- learn what qualifies as enrichment
- learn various ways to calculate enrichment for different situations

Goals
========================================================

- learn what qualifies as enrichment
- learn various ways to calculate enrichment for different situations
- applications to annotations in RNA-seq data (i.e. GO)

Goals
========================================================

- learn what qualifies as enrichment
- learn various ways to calculate enrichment for different situations
- applications to annotations in RNA-seq data (i.e. GO)
- what are ontologies, and what are their limitations?

Why enrichment?
========================================================

We hear this term of art _constantly_ throughout biology, molecular biology, genomics & especially bioinformatics.


Why enrichment?
========================================================

# ENRICHMENT IS **evidence for organized activity**

![](fish_school.jpg)

What is enrichment?
========================================================

more things than expected due to random chance

What is enrichment?
========================================================

more things than expected due to random chance

- what do you expect?

Calculating enrichment
========================================================

![](bw_marbles.jpg)


Calculating enrichment
========================================================

- finite number of marbles

Calculating enrichment
========================================================

- finite number of marbles
- known number of blacks & whites

Calculating enrichment
========================================================

- finite number of marbles
- known number of blacks & whites
- therefore probabilities are known

Calculating enrichment
========================================================

- finite number of marbles
- known number of blacks & whites
- therefore probabilities are known p_white, p_black

Calculating enrichment
========================================================

If we select a single marble, the probabilities change

m = 15, n = 45

Calculating enrichment
========================================================

If we select a single marble, the probabilities change

m = 15, n = 45

draw1: p_m = 15 / 15 + 45
```{r draw-one, echo = FALSE}
round(15/60, 2)
```

Calculating enrichment
========================================================

If we select a single marble, the probabilities change

m = 15, n = 45

draw1: p_m = 15 / 15 + 45
```{r draw-one-b, echo = FALSE}
round(15/60, 2)
```
draw2: p_m = 14 / 14 + 45
```{r draw-two, echo = FALSE}
round(14/59, 3)
```

Calculating enrichment
========================================================

If we select multiple marbles, the probabilities are described by

# [Hypergeometric distribution](https://en.wikipedia.org/wiki/Hypergeometric_distribution)

Calculating enrichment
========================================================

If we select multiple marbles, the probabilities are described by

# [Hypergeometric distribution](https://en.wikipedia.org/wiki/Hypergeometric_distribution)

Hypergeo is related to binomial dist
- finite population 
- sampling without replacement

Calculating enrichment in R
========================================================
class: small-code

Function `phyper`

```{r example-one, eval=FALSE}
phyper(q, m, n, k, lower.tail = TRUE, log.p = FALSE)
```

- `q` vector of quantiles representing the number of white marbles drawn without replacement from a bag which contains both black and white marbles.

- `m` the number of white marbles in the bag

- `n` the number of black marbles in the bag

- `k` the number of marbles drawn


Hypergeometric distribution
========================================================
class: small-code
(PMF = "**P**robability **M**ass **F**unction)

```{r pmf, echo = FALSE, results = 'hide'}
library("dplyr")
library("ggplot2")
library("foreach")
library("RColorBrewer")
## 
x = 0:15
k = 0:60
pmfprobs <- foreach(i = x, .combine = 'rbind') %do% data.frame(x=rep(i, length(k)), k, p = dhyper(i, 15, 45, k))
ggplot(pmfprobs[pmfprobs$k %in% c(1, 10, 20, 30, 40, 50, 59),]) + 
  geom_point(aes(x = x, y = p, colour = factor(k))) +
  geom_line(aes(x = x, y = p, colour = factor(k))) +
  scale_color_brewer(palette="Dark2", name = "number of trials") +
  ylab("probability") +
  xlab("successes")
  theme_minimal() +
  theme(text = element_text(size=24)) +
  ggtitle("Probability Mass Function (m=15, n=45)")
```

Hypergeometric distribution
========================================================
class: small-code
(PMF = "**P**robability **M**ass **F**unction)

```{r pmf-code, eval=FALSE}
library("dplyr")
library("ggplot2")
library("foreach")
library("RColorBrewer")
## 
x = 0:15
k = 0:60
pmfprobs <- foreach(i = x, .combine = 'rbind') %do% data.frame(x=rep(i, length(k)), k, p = dhyper(i, 15, 45, k))
ggplot(pmfprobs[pmfprobs$k %in% c(1, 10, 20, 30, 40, 50, 59),]) + 
  geom_point(aes(x = x, y = p, colour = factor(k))) +
  geom_line(aes(x = x, y = p, colour = factor(k))) +
  scale_color_brewer(palette="Dark2", name = "number of trials") +
  ylab("probability") +
  xlab("successes")
  theme_minimal() +
  theme(text = element_text(size=24)) +
  ggtitle("Probability Mass Function (m=15, n=45)")
```

Hypergeometric distribution: code
========================================================
class: small-code

```{r example-one-A, eval=FALSE}
#                       \/       \/
#                       \/       \/
#                       \/       \/
phyper(q, m, n, k, lower.tail = FALSE, log.p = FALSE)
```

Hypergeometric distribution: code
========================================================
class: small-code

```{r hyper-graph, echo = FALSE, results = 'hide'}
mydat <- pmfprobs[pmfprobs$k == 28,]
ggplot(mydat) + 
  geom_point(aes(x = x, y = p), col = "purple", cex = 2) +
  geom_line(aes(x = x, y = p), col = "purple") +
  scale_color_brewer(palette="Dark2", name = "number of trials") +
  ylab("probability") +
  xlab("successes")
  theme_minimal() +
  theme(text = element_text(size=24)) +
  ggtitle("Probability Mass Function (m=15, n=45)")
```

Hypergeometric distribution: code
========================================================
class: small-code

```{r hyper-graph-tail, echo = FALSE, results = 'hide'}
mydat <- pmfprobs[pmfprobs$k == 28,]
ggplot(mydat) + 
  geom_point(aes(x = x, y = p), col = "purple", cex = 2) +
  geom_line(aes(x = x, y = p), col = "purple") +
  geom_point(data = mydat[mydat$x > 10,], aes(x = x, y = p), col = "red", cex = 5) +
  scale_color_brewer(palette="Dark2", name = "number of trials") +
  ylab("probability") +
  xlab("successes")
  theme_minimal() +
  theme(text = element_text(size=24)) +
  ggtitle("Probability Mass Function (m=15, n=45)")
```

Hypergeo example
========================================================

- 100 marbles
- 20 are white
- Question: draw 10 (k), obtain 3 (q); **how likely is $\geq 3$?**


Hypergeo example
========================================================
class: small-code

- 100 marbles
- 20 are white
- Question: draw 10 (k), obtain 3 (q); **how likely is $\geq 3$?**

```{r example-one-run}
phyper(2, 20, 80, 10, lower.tail = FALSE, log.p = FALSE)
```

`lower.tail	
logical; if TRUE (default), probabilities are P[X â‰¤ x], otherwise, P[X > x]`

Hypergeo example
========================================================
class: small-code

- 100 marbles
- 20 are white
- Question: draw 10 (k), obtain 3 (q); **how likely is $\geq 3$?**

```{r example-one-run-graph, echo=FALSE, results = 'hide'}
q = 1:10
probability = phyper(q=q, m=20, n=80, k=10, lower.tail=FALSE)
plot(q, probability, xlab = "number of successes", ylab = "probability in right tail", pch=16)
lines(q, probability)
abline(h = 0.05, lty = 2, col = 'red')
abline(v = 2, col = 'blue')
```

Hypergeo example
========================================================
class: small-code

- 100 marbles
- 20 are white
- draw 10 (k), obtain 3 (q); **how likely is _exactly_ 3?**

```{r example-one-run-graph-density-code, eval=FALSE}
q = 0:10
probability = dhyper(x=q, m=20, n=80, k=10)
plot(q, probability, xlab = "number of successes", ylab = "probability in right tail", pch=16)
lines(q, probability)
abline(h = 0.05, lty = 2, col = 'red')
abline(v = 3, col = 'blue')
```

Hypergeo example
========================================================
class: small-code

- 100 marbles
- 20 are white
- draw 10 (k), obtain 3 (q); **how likely is _exactly_ 3?**

```{r example-one-run-graph-density-graph, echo=FALSE}
q = 0:10
probability = dhyper(x=q, m=20, n=80, k=10)
plot(q, probability, xlab = "number of successes", ylab = "probability in right tail", pch=16)
lines(q, probability)
abline(h = 0.05, lty = 2, col = 'red')
abline(v = 3, col = 'blue')
round(dhyper(x=3, m=20, n=80, k=10), 3)
```

Hypergeometric distribution 1-tailed
========================================================

# [Fisher's exact test](https://en.wikipedia.org/wiki/Fisher%27s_exact_test)

What about general enrichment problems? 
========================================================
- large populations >> k, $p$=very small
- background available

What about general enrichment problems? 
========================================================
- use math to estimate uncertainty
- aside: if probabilities known: use $\chi ^2$ test!

What about general enrichment problems? 
========================================================
- use math to estimate uncertainty
- aside: if probabilities known: use $\chi ^2$ test!
- true probability not known: Bayes to the rescue

What about general enrichment problems? 
========================================================
suppose we have 2 sets of observations:

- one is **control** condition
- one is **treatment** condition
- each observation is a "draw" as in hypergeo, but now

What about general enrichment problems? 
========================================================
suppose we have 2 sets of observations:

- one is **control** condition
- one is **treatment** condition
- each observation is a "draw" as in hypergeo, but now

### sample with replacement
### population unknown in both cases

General Enrichment Calculation
========================================================
class: small-code

What is the probability of finding a read in a given gene (random draw), given the data

```{r beta-rna-seq}
credible_expression <- rbeta(1e5, 234, 4e7)
cpm <- credible_expression * 1e6
plot(density(cpm), xlim=c(0,100))
```

```{r cpm-result, echo = FALSE}
paste(round(mean(cpm), 1), "cpm")
```

General Enrichment Calculation
========================================================
class: small-code

Splicing: splice forms A and B 

<img src = "isoforms.png", style="width:800px;height:400px;">


General Enrichment Calculation
========================================================
class: small-code

Splicing: splice forms A and B 

Controls: A:B = 48:186

```{r beta-splicing}
# probability of observing form A in controls
plot(density(rbeta(1e5, 48, 186)), xlim=c(0,1), main="splicing example")
```

```{r beta-splicing-frac, echo = FALSE}
# probability of observing form A in controls
round(mean(rbeta(1e5, 48, 186)), 3)
```


General Enrichment Calculation
========================================================
class: small-code

New Condition: observe 24 A, 47 B

```{r beta-splicing-observe}
# probability of observing form A in controls
plot(density(rbeta(1e5, 48, 186)), xlim=c(0,1), main="splicing example")
lines(density(rbeta(1e5, 24, 47)))
```

General Enrichment Calculation
========================================================
class: small-code

New Condition: observe 24 A, 47 B

```{r beta-splicing-diff}
# probability of observing form A in controls
plot(density(rbeta(1e5, 48, 186)), xlim=c(0,1), main="splicing example")
lines(density(rbeta(1e5, 24, 47)))
lines(density(rbeta(1e5, 24, 47)-rbeta(1e5, 48, 186)), lty=2, col='red')
```

General Enrichment Calculation
========================================================
class: small-code

**"Null"** hypothesis test: rejection!

```{r beta-splicing-pval}
nsamples <- 1e6
treatment <- rbeta(nsamples, 24, 47)
control <- rbeta(nsamples, 48, 186)
p_value <- sum(treatment - control <= 0) / nsamples
print(p_value)
```


General Enrichment Calculation: Applications
========================================================
class: small-code

- splicing

General Enrichment Calculation: Applications
========================================================

- splicing
- enrichment of SNPs in epigenomics data

General Enrichment Calculation: Applications
========================================================

- splicing
- enrichment of SNPs in epigenomics data
- allele specific expression (ASE)

General Enrichment Calculation: Applications
========================================================

### Any problem involving count data where the underlying probability is not known but a suitable "background" condition is available for comparison

